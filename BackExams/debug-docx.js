// debug-docx.js - Script para diagnosticar el problema con docx
import fs from 'fs';
import path from 'path';

console.log('üîç Diagn√≥stico del m√≥dulo docx\n');

// 1. Verificar si existe la carpeta node_modules/docx
const docxPath = './node_modules/docx';
console.log('üìÅ Verificando carpeta docx...');
if (fs.existsSync(docxPath)) {
    console.log('‚úÖ Carpeta docx existe');
    
    // 2. Listar contenido de la carpeta docx
    console.log('\nüìÇ Contenido de node_modules/docx:');
    const docxContents = fs.readdirSync(docxPath);
    docxContents.forEach(item => {
        const itemPath = path.join(docxPath, item);
        const isDir = fs.statSync(itemPath).isDirectory();
        console.log(`   ${isDir ? 'üìÅ' : 'üìÑ'} ${item}`);
    });
    
    // 3. Verificar package.json de docx
    const docxPackageJson = path.join(docxPath, 'package.json');
    if (fs.existsSync(docxPackageJson)) {
        console.log('\nüìã package.json de docx:');
        const packageData = JSON.parse(fs.readFileSync(docxPackageJson, 'utf8'));
        console.log(`   Versi√≥n: ${packageData.version}`);
        console.log(`   Main: ${packageData.main || 'no definido'}`);
        console.log(`   Module: ${packageData.module || 'no definido'}`);
        console.log(`   Exports: ${JSON.stringify(packageData.exports, null, 2) || 'no definido'}`);
        console.log(`   Type: ${packageData.type || 'no definido'}`);
    }
    
    // 4. Verificar si existe build/
    const buildPath = path.join(docxPath, 'build');
    if (fs.existsSync(buildPath)) {
        console.log('\nüìÇ Contenido de node_modules/docx/build:');
        const buildContents = fs.readdirSync(buildPath);
        buildContents.forEach(item => {
            console.log(`   üìÑ ${item}`);
        });
        
        // 5. Verificar archivos espec√≠ficos
        const indexMjs = path.join(buildPath, 'index.mjs');
        const indexJs = path.join(buildPath, 'index.js');
        const indexDts = path.join(buildPath, 'index.d.ts');
        
        console.log('\nüéØ Archivos de entrada:');
        console.log(`   index.mjs: ${fs.existsSync(indexMjs) ? '‚úÖ Existe' : '‚ùå No existe'}`);
        console.log(`   index.js: ${fs.existsSync(indexJs) ? '‚úÖ Existe' : '‚ùå No existe'}`);
        console.log(`   index.d.ts: ${fs.existsSync(indexDts) ? '‚úÖ Existe' : '‚ùå No existe'}`);
    } else {
        console.log('\n‚ùå No existe carpeta build/');
    }
    
    // 6. Verificar otros posibles archivos de entrada
    const possibleEntries = ['index.js', 'index.mjs', 'lib/index.js', 'dist/index.js'];
    console.log('\nüîç Buscando posibles archivos de entrada:');
    possibleEntries.forEach(entry => {
        const entryPath = path.join(docxPath, entry);
        console.log(`   ${entry}: ${fs.existsSync(entryPath) ? '‚úÖ Existe' : '‚ùå No existe'}`);
    });
    
} else {
    console.log('‚ùå Carpeta docx no existe');
    console.log('üí° Ejecuta: npm install docx');
}

// 7. Verificar versi√≥n de Node.js
console.log('\nüü¢ Informaci√≥n del entorno:');
console.log(`   Node.js: ${process.version}`);
console.log(`   Plataforma: ${process.platform}`);
console.log(`   Arquitectura: ${process.arch}`);

// 8. Intentar diferentes m√©todos de import
console.log('\nüß™ Probando diferentes m√©todos de import...');

// M√©todo 1: Import directo
try {
    console.log('   M√©todo 1: import docx...');
    const docx = await import('docx');
    console.log('   ‚úÖ import docx funciona');
    console.log(`   ‚úÖ Packer disponible: ${typeof docx.Packer === 'function'}`);
} catch (error) {
    console.log(`   ‚ùå import docx fall√≥: ${error.message}`);
}

// M√©todo 2: Import destructurado
try {
    console.log('   M√©todo 2: import { Packer } from docx...');
    const { Packer } = await import('docx');
    console.log('   ‚úÖ import { Packer } funciona');
    console.log(`   ‚úÖ Packer es funci√≥n: ${typeof Packer === 'function'}`);
} catch (error) {
    console.log(`   ‚ùå import { Packer } fall√≥: ${error.message}`);
}

// M√©todo 3: Require (si es posible)
try {
    console.log('   M√©todo 3: require(docx)...');
    const docx = await import('docx');
    console.log('   ‚úÖ require docx funciona (simulado con import)');
} catch (error) {
    console.log(`   ‚ùå require docx fall√≥: ${error.message}`);
}

console.log('\nüìã Diagn√≥stico completado');
console.log('üí° Si ves errores arriba, ese es el problema espec√≠fico que hay que solucionar');